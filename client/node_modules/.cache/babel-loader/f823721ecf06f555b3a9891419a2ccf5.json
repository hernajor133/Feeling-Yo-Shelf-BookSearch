{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jordi\\\\Documents\\\\Homework\\\\Feeling-Yo-Shelf-BookSearch\\\\client\\\\src\\\\pages\\\\SearchBooks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchBooks = () => {\n  _s();\n\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]); // create state for holding our search field data\n\n  const [searchInput, setSearchInput] = useState(\"\"); // create state to hold saved bookId values\n\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [saveBook] = useMutation(SAVE_BOOK); // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  }); // create method to search for books and set state on form submit\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const {\n        items\n      } = await response.json();\n      const bookData = items.map(book => {\n        var _book$volumeInfo$imag;\n\n        return {\n          bookId: book.id,\n          authors: book.volumeInfo.authors || [\"No author to display\"],\n          title: book.volumeInfo.title,\n          description: book.volumeInfo.description,\n          image: ((_book$volumeInfo$imag = book.volumeInfo.imageLinks) === null || _book$volumeInfo$imag === void 0 ? void 0 : _book$volumeInfo$imag.thumbnail) || \"\"\n        };\n      });\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  }; // create function to handle saving a book to our database\n\n\n  const handleSaveBook = async bookId => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find(book => book.bookId === bookId); // get token\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveBook({\n        variables: {\n          book: bookToSave\n        }\n      }); // if book successfully saves to user's account, save book id to state\n\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"text-light bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Search for Books!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleFormSubmit,\n          children: /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              md: 8,\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                name: \"searchInput\",\n                value: searchInput,\n                onChange: e => setSearchInput(e.target.value),\n                type: \"text\",\n                size: \"lg\",\n                placeholder: \"Search for a book\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 12,\n              md: 4,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"success\",\n                size: \"lg\",\n                children: \"Submit Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: searchedBooks.length ? `Viewing ${searchedBooks.length} results:` : \"Search for a book to begin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: searchedBooks.map(book => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [book.image ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: book.image,\n              alt: `The cover for ${book.title}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 19\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: book.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small\",\n                children: [\"Authors: \", book.authors]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: book.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this), Auth.loggedIn() && /*#__PURE__*/_jsxDEV(Button, {\n                disabled: savedBookIds === null || savedBookIds === void 0 ? void 0 : savedBookIds.some(savedBookId => savedBookId === book.bookId),\n                className: \"btn-block btn-info\",\n                onClick: () => handleSaveBook(book.bookId),\n                children: savedBookIds !== null && savedBookIds !== void 0 && savedBookIds.some(savedBookId => savedBookId === book.bookId) ? \"This book has already been saved!\" : \"Save this Book!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)]\n          }, book.bookId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SearchBooks, \"riUERULDfVrP+BAI/kpHF0ys0PU=\", false, function () {\n  return [useMutation];\n});\n\n_c = SearchBooks;\nexport default SearchBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBooks\");","map":{"version":3,"sources":["C:/Users/Jordi/Documents/Homework/Feeling-Yo-Shelf-BookSearch/client/src/pages/SearchBooks.js"],"names":["React","useState","useEffect","Jumbotron","Container","Col","Form","Button","Card","CardColumns","useMutation","SAVE_BOOK","Auth","searchGoogleBooks","saveBookIds","getSavedBookIds","SearchBooks","searchedBooks","setSearchedBooks","searchInput","setSearchInput","savedBookIds","setSavedBookIds","saveBook","handleFormSubmit","event","preventDefault","response","ok","Error","items","json","bookData","map","book","bookId","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","err","console","error","handleSaveBook","bookToSave","find","token","loggedIn","getToken","variables","e","target","value","length","some","savedBookId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { SAVE_BOOK } from \"../utils/mutations\";\r\n\r\nimport Auth from \"../utils/auth\";\r\nimport { searchGoogleBooks } from \"../utils/API\";\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  const [saveBook] = useMutation(SAVE_BOOK);\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await saveBook({\r\n        variables: { book: bookToSave },\r\n      });\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;"]},"metadata":{},"sourceType":"module"}